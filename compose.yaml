services:
  database:
    container_name: database
    restart: always
    image: postgres:16-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      retries: 10
      timeout: 5s
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      # TODO: Use env
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  message-queue:
    container_name: message-queue
    image: redis:7-alpine
    command: redis-server --requirepass redis --appendonly yes
    # TODO: healthcheck:
    volumes:
      - mq_data:/data
    ports:
      - 6379:6379
    networks:
      - internal_network

  backend:
    container_name: backend
    build: .
    restart: always
    volumes:
      - .:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
    networks:
      - external_network
      - internal_network
    ports:
      - 8000:8000
    depends_on:
      database:
        condition: service_healthy
      message-queue:
        # TODO: condition: service_healthy
        condition: service_started

  worker:
    container_name: worker
    build: .
    entrypoint: [
      "celery",
      "-A",
      "dashboard",
      "worker",
      "--loglevel=info",
      "--concurrency=2"
    ]
    volumes:
      - .:/app
    depends_on:
      database:
        condition: service_healthy
      message-queue:
        # TODO: condition: service_healthy
        condition: service_started
    networks:
      - external_network
      - internal_network

  scheduler:
    container_name: scheduler
    build: .
    entrypoint: [
      "celery",
      "-A",
      "dashboard",
      "beat",
      "-l",
      "info",
      "--scheduler",
      "django_celery_beat.schedulers:DatabaseScheduler"
    ]
    volumes:
      - .:/app
    depends_on:
      database:
        condition: service_healthy
      message-queue:
        # TODO: condition: service_healthy
        condition: service_started
      # TODO: backend:
      # TODO:   condition: service_healthy
    networks:
      - internal_network

  reverse-proxy:
    image: nginx:1.26-alpine
    container_name: reverse-proxy
    ports:
      - 80:80
      # Cloudflare seems to provide SSL certificates
      # - 443:443
    volumes:
      - ../dashboard-frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      # npm run build should be done before running
      - ../dashboard-frontend/build:/usr/share/nginx/html
      # - /etc/letsencrypt/live/dashboard.huyfififi.com/fullchain.pem:/etc/letsencrypt/live/dashboard.huyfififi.com/fullchain.pem
      # - /etc/letsencrypt/live/dashboard.huyfififi.com/privkey.pem:/etc/letsencrypt/live/dashboard.huyfififi.com/privkey.pem
    networks:
      - internal_network
      - external_network
    depends_on:
      - backend

networks:
  external_network:
  internal_network:
    internal: true

volumes:
  db_data:
  mq_data:
