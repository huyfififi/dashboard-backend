import pytest
from django.core.exceptions import ValidationError
from django.db.utils import IntegrityError
from rest_framework.reverse import reverse
from rest_framework.test import APIClient

from codeforces.models import CodeforcesUser, CodeforcesSubmission
from codeforces.serializers import CodeforcesSubmissionSerializer


@pytest.mark.django_db
class TestCodeforcesUserModel:
    # Generated by Chat-GPT4o
    def test_user_creation(self):
        user = CodeforcesUser.objects.create(
            handle="test_handle",
            rating=1500,
            max_rating=1600,
            participated_contests_count=1800,
        )
        assert user.handle == "test_handle"
        assert user.rating == 1500
        assert user.max_rating == 1600
        assert user.participated_contests_count == 1800
        assert user.last_updated is not None

    def test_handle_is_unique(self):
        CodeforcesUser.objects.create(
            handle="test_handle", rating=1500, max_rating=1600
        )
        with pytest.raises(IntegrityError):
            CodeforcesUser.objects.create(
                handle="test_handle", rating=1400, max_rating=1500
            )

    def test_blank_fields(self):
        user = CodeforcesUser.objects.create(handle="new_handle")
        assert user.rating is None
        assert user.max_rating is None
        assert user.participated_contests_count == 0
        assert user.last_updated is not None


@pytest.mark.django_db
class TestCodeforcesSubmissionModel:
    def test_submission_creation(self):
        user = CodeforcesUser.objects.create(
            handle="test_handle", rating=1500, max_rating=1600
        )
        submission: CodeforcesSubmission = user.codeforcessubmission_set.create(
            contest_id=1,
            problem_index="A",
            programming_language="Python",
            submission_id=1,
            verdict="AC",
        )
        assert submission.contest_id == 1
        assert submission.problem_index == "A"
        assert submission.programming_language == "Python"
        assert submission.submission_id == 1
        assert submission.verdict == "AC"

    def test_verdict_choices(self):
        user = CodeforcesUser.objects.create(
            handle="test_handle", rating=1500, max_rating=1600
        )
        submission: CodeforcesSubmission = user.codeforcessubmission_set.create(
            contest_id=1,
            problem_index="A",
            programming_language="Python",
            submission_id=1,
            verdict="WA",
        )
        assert submission.verdict == "WA"

        submission.verdict = "AC"  # valid choice
        submission.full_clean()
        submission.save()

        submission.verdict = "AAA"  # not a valid choice
        submission.save()  # choices are not enforced at the database level

        with pytest.raises(ValidationError):
            submission.full_clean()
            submission.save()


@pytest.mark.django_db
class TestCodeforcesSubmissionSerializer:
    @pytest.fixture
    def user(self):
        return CodeforcesUser.objects.create(
            handle="test_handle", rating=1500, max_rating=1600
        )

    @pytest.fixture
    def submission_data(self, user):
        return {
            "contest_id": 1,
            "problem_index": "A",
            "programming_language": "Python",
            "submission_id": 1,
            "user": user.id,
            "verdict": "AC",
        }

    def test_serialize_valid_data(self, submission_data):
        assert CodeforcesSubmissionSerializer(data=submission_data).is_valid()

    def test_user_is_required(self, submission_data):
        serializer = CodeforcesSubmissionSerializer(
            data=submission_data | {"user": None}
        )
        assert not serializer.is_valid()
        err = serializer.errors["user"][0]
        assert err == "This field may not be null."
        assert err.code == "null"

    def test_verdict_is_optional(self, submission_data):
        serializer = CodeforcesSubmissionSerializer(
            data=submission_data | {"verdict": None}
        )
        assert serializer.is_valid()

    def test_invalid_verdict(self, submission_data):
        serializer = CodeforcesSubmissionSerializer(
            data=submission_data | {"verdict": "AAA"}
        )
        assert not serializer.is_valid()
        err = serializer.errors["verdict"][0]
        assert err == '"AAA" is not a valid choice.'
        assert err.code == "invalid_choice"


@pytest.mark.django_db
class TestCodeforcesUserAPI:
    @pytest.fixture
    def client(self):
        return APIClient()

    def test_handle_in_setting_is_required(self, client, settings):
        settings.CODEFORCES_HANDLE = None
        response = client.get(reverse("codeforces-user-info"))
        assert response.status_code == 500
        assert response.json() == {
            "error": (
                "user record was not found. " "that might be due to misconfiguration."
            )
        }

    def test_retrieve_user_info(self, client, mocker, settings):
        settings.CODEFORCES_HANDLE = "dotted_seal"

        CodeforcesUser.objects.create(
            handle="dotted_seal",
            rating=1000,
            max_rating=1050,
            participated_contests_count=1234,
        )
        response = client.get(reverse("codeforces-user-info"))
        assert response.status_code == 200
        assert response.json() == {
            "handle": "dotted_seal",
            "rating": 1000,
            "max_rating": 1050,
            "participated_contests_count": 1234,
            "last_updated": mocker.ANY,
        }


@pytest.mark.django_db
class TestCodeforcesSubmissionAPI:
    @pytest.fixture
    def client(self):
        return APIClient()

    def test_handle_in_setting_is_required(self, client, settings):
        settings.CODEFORCES_HANDLE = None
        response = client.get(reverse("codeforces-user-statistics"))
        assert response.status_code == 500
        assert response.json() == {
            "error": (
                "user record was not found. " "that might be due to misconfiguration."
            )
        }

    def test_retrieve_user_submissions_metrics(self, client, mocker, settings):
        settings.CODEFORCES_HANDLE = "dotted_seal"

        user = CodeforcesUser.objects.create(
            handle="dotted_seal",
            rating=1000,
            max_rating=1050,
        )
        user.codeforcessubmission_set.create(
            contest_id=1,
            problem_index="A",
            programming_language="Python",
            submission_id=1,
            verdict="AC",
        )
        user.codeforcessubmission_set.create(
            contest_id=1,
            problem_index="B",
            programming_language="Python",
            submission_id=2,
            verdict="WA",
        )
        user.codeforcessubmission_set.create(
            contest_id=2,
            problem_index="A",
            programming_language="Python",
            submission_id=3,
            verdict="AC",
        )
        user.codeforcessubmission_set.create(
            contest_id=2,
            problem_index="A",
            programming_language="Python",
            submission_id=4,
            verdict="WA",
        )

        response = client.get(reverse("codeforces-user-statistics"))
        assert response.status_code == 200
        assert response.json() == {
            "solved_count": 2,
            "total_count": 4,
        }
